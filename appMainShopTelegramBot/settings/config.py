# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å logging –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
import logging.config
import os

from dotenv import load_dotenv

# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å emoji –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ–¥–∂–∏
from emoji import emojize

# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å passslib –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
from passlib.context import CryptContext

pwd_cxt = CryptContext(schemes=["bcrypt"], deprecated="auto")


class Hash:
    """–ö–ª–∞—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""

    def bcrypt(self: str):
        """–ú–µ—Ç–æ–¥, —à–∏—Ñ—Ä—É—é—â–∏–π —Å—Ç—Ä–æ–∫—É

        Args:
             self: —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        return pwd_cxt.hash(self)

    def verify(self: str, plain_password):
        """–ú–µ—Ç–æ–¥, —Å—Ä–∞–≤–Ω–∏–≤–∞—é—â–∏–π —Å—Ç—Ä–æ–∫—É —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π

        Args:
            self: –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            plain_password: —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        Returns:
            True | False
        """
        return pwd_cxt.verify(plain_password, self)


load_dotenv()
# —Ç–æ–∫–µ–Ω –≤—ã–¥–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
TOKEN = os.environ.get("TOKEN")
# –Ω–∞–∑–≤–∞–Ω–∏–µ –ë–î
# NAME_DB = 'botshop.sqlite'
# –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
VERSION = os.environ.get("VERSION")
# –∞–≤—Ç–æ—Ä –ø—Ä–∏–ª–æ–∂–Ω–∏—è
AUTHOR = os.environ.get("AUTHOR")

# —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ settings
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
# –ø—É—Ç—å –¥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# DB = "shopdb"
# DATABASE = os.path.join('sqlite:///'+BASE_DIR,DB,NAME_DB)

# –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ env

COUNT = 0

# –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
KEYBOARD = {
    "CHOOSE_GOODS": emojize(":open_book: –ú–µ–Ω—é"),
    "INFO": emojize(":speech_balloon: –û –∫–∞—Ñ–µ"),
    "SETTINGS": emojize("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
    "EUROPEAN_MENU": emojize(":fork_and_knife_with_plate: –ï–≤—Ä–æ–ø–µ–π—Å–∫–æ–µ –º–µ–Ω—é"),
    "JAPANESE_MENU": emojize(":chopsticks: –Ø–ø–æ–Ω—Å–∫–æ–µ –º–µ–Ω—é"),
    "PIZZA": emojize(":pizza: –ü–∏—Ü—Ü–∞"),
    "<<": emojize("‚è™ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
    ">>": emojize("‚è©"),
    "BACK_STEP": emojize("‚óÄÔ∏è"),
    "NEXT_STEP": emojize("‚ñ∂Ô∏è"),
    "ORDER": emojize("‚úÖ –ó–ê–ö–ê–ó"),
    "X": emojize("‚ùå"),
    "DOUWN": emojize("üîΩ"),
    "AMOUNT_PRODUCT": COUNT,
    "AMOUNT_ORDERS": COUNT,
    "UP": emojize("üîº"),
    "APPLAY": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
    "COMMENT": "‚úÖ –û—Ç–∑—ã–≤—ã –æ –±–ª—é–¥–∞—Ö",
    "COPY": "¬©Ô∏è",
}

# id –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
CATEGORY = {
    "EUROPEAN_MENU": 1,
    "JAPANESE_MENU": 2,
    "PIZZA": 3,
}

# –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
COMMANDS = {
    "START": "start",
    "HELP": "help",
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
if not os.path.isdir("logs"):
    os.makedirs("logs")

log_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../logging.conf")
logging.config.fileConfig(log_file_path)
logging.getLogger("urllib3").setLevel(logging.WARNING)
logging.getLogger("urllib3").propagate = False
logging.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
